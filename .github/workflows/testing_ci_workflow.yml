name: CI - Execução de Testes Automatizados
run-name: Testes de CI com Robot Framework
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_combination: [
          { test_type: web, test_path: testes_web_avancado },
          { test_type: API, test_path: testes_API_avancado },
          { test_type: builtin_lib, test_path: biblioteca_builtin_avancado },
          { test_type: custom_lib, test_path: bibliotecas_customizadas },
          { test_type: aux_lib, test_path: bibliotecas_auxiliares }
        ]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: robot
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d robot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python 3.12.0
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          pip install psycopg2
          pip install -U -r requirements.txt

      - name: Instalar cliente PostgreSQL
        run: sudo apt-get install -y postgresql-client

      - name: Testar conexão com PostgreSQL
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d robot -c "SELECT version();"
        
      - name: Run tests
        run: |
          BASE_DIR="${GITHUB_WORKSPACE}/${{ matrix.test_combination.test_path }}"
          if [ "${{ matrix.test_combination.test_type }}" == "web" ]; then
            robot -d ./resultados-testes-CI -v HEADLESS:true -v BROWSER:chrome -v EXECDIR:${BASE_DIR} \
            -v CURDIR:${BASE_DIR}/tests testes_web_avancado/tests
          elif [ "${{ matrix.test_combination.test_type }}" == "API" ]; then
            robot -d ./resultados-testes-CI -v MY_GITHUB_USER:${{ secrets.MY_GITHUB_USER }} \
            -v MY_GITHUB_TOKEN:${{ secrets.MY_GITHUB_TOKEN }} -v EXECDIR:${BASE_DIR} \
            -v CURDIR:${BASE_DIR}/tests testes_API_avancado/tests
          elif [ "${{ matrix.test_combination.test_type }}" == "builtin_lib" ]; then
            robot -d ./resultados-testes-CI -v EXECDIR:${BASE_DIR} \
            -v CURDIR:${BASE_DIR}/tests  biblioteca_builtin_avancado/tests
          elif [ "${{ matrix.test_combination.test_type }}" == "custom_lib" ]; then
            robot -d ./resultados-testes-CI -v EXECDIR:${BASE_DIR} \
            -v CURDIR:${BASE_DIR}/tests \
            -e SeleniumLibraryCustom bibliotecas_customizadas/tests
          elif [ "${{ matrix.test_combination.test_type }}" == "aux_lib" ]; then
            robot -d ./resultados-testes-CI -v EXECDIR:${BASE_DIR} \
            -v CURDIR:${BASE_DIR}/tests -e ProcessCT01 bibliotecas_auxiliares/tests
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test_combination.test_type }}_results
          path: ./resultados-testes-CI
          if-no-files-found: ignore
          retention-days: 2
  
      - name: Download results
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.test_combination.test_type }}_results
          path: ./resultados/${{ matrix.test_combination.test_type }}

      - name: Debug - Verificar arquivos baixados
        if: always()
        run: ls -R ./resultados/${{ matrix.test_combination.test_type }} || echo "Nenhum arquivo baixado!"
      
      - name: Publicar Sumário no GitHub Actions
        if: always()
        run: |
          echo "## 📊 Resultados dos Testes Automatizados 🚀" >> $GITHUB_STEP_SUMMARY
          echo "- Tipo de teste: **${{ matrix.test_combination.test_type }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Status da execução: **${{ job.status == 'success' && '✅ Sucesso' || '❌ Falha' }}**" >> $GITHUB_STEP_SUMMARY